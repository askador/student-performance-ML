// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using StudentPerformanceApp.Data;

#nullable disable

namespace StudentPerformanceApp.Migrations
{
    [DbContext(typeof(StudentDbContext))]
    [Migration("20240315122720_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.17")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("StudentPerformanceApp.Data.Models.Course", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("StudentPerformanceApp.Data.Models.Grades", b =>
                {
                    b.Property<Guid>("StudentId")
                        .HasColumnType("uuid");

                    b.Property<float?>("G1")
                        .HasColumnType("real");

                    b.Property<float?>("G2")
                        .HasColumnType("real");

                    b.Property<float?>("G3")
                        .HasColumnType("real");

                    b.HasKey("StudentId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("StudentPerformanceApp.Data.Models.School", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("SchoolCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SchoolName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Schools");
                });

            modelBuilder.Entity("StudentPerformanceApp.Data.Models.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Absences")
                        .HasColumnType("integer");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Age")
                        .HasColumnType("integer");

                    b.Property<string>("AttendedNursery")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("CourseId")
                        .HasColumnType("uuid");

                    b.Property<string>("ExtraCurricularActivities")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ExtraEducationalSupport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FamilyEducationalSupport")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FamilyRelationshipQuality")
                        .HasColumnType("integer");

                    b.Property<string>("FamilySize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FatherEducation")
                        .HasColumnType("integer");

                    b.Property<string>("FatherJob")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FreeTime")
                        .HasColumnType("integer");

                    b.Property<int>("GoingOutWithFriends")
                        .HasColumnType("integer");

                    b.Property<string>("Guardian")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("HealthStatus")
                        .HasColumnType("integer");

                    b.Property<string>("HigherEducationAspirations")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("InternetAccess")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("MotherEducation")
                        .HasColumnType("integer");

                    b.Property<string>("MotherJob")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaidClasses")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ParentStatus")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("PastFailures")
                        .HasColumnType("integer");

                    b.Property<string>("RomanticRelationship")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("SchoolId")
                        .HasColumnType("uuid");

                    b.Property<string>("SchoolReason")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Sex")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("StudyTime")
                        .HasColumnType("integer");

                    b.Property<int>("TravelTime")
                        .HasColumnType("integer");

                    b.Property<int>("WeekendAlcoholConsumption")
                        .HasColumnType("integer");

                    b.Property<int>("WorkdayAlcoholConsumption")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("CourseId");

                    b.HasIndex("SchoolId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("StudentPerformanceApp.Data.Models.Grades", b =>
                {
                    b.HasOne("StudentPerformanceApp.Data.Models.Student", "Student")
                        .WithOne("Grades")
                        .HasForeignKey("StudentPerformanceApp.Data.Models.Grades", "StudentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StudentPerformanceApp.Data.Models.Student", b =>
                {
                    b.HasOne("StudentPerformanceApp.Data.Models.Course", "Course")
                        .WithMany("Students")
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StudentPerformanceApp.Data.Models.School", "School")
                        .WithMany("Students")
                        .HasForeignKey("SchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("School");
                });

            modelBuilder.Entity("StudentPerformanceApp.Data.Models.Course", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentPerformanceApp.Data.Models.School", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("StudentPerformanceApp.Data.Models.Student", b =>
                {
                    b.Navigation("Grades")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
